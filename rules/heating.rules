// ***************** Generic commands for heating *************************************************************************************
// ***************** Arbeitszimmer ****************************************************************************************************


// Enable heating only if its cold outside
// https://community.openhab.org/t/working-with-number-temperature-items-in-rules/116197

rule "Heating Arbeitszimmer"
when  Item Heating_Arbeitszimmer_Comfort changed
then

   logInfo("heating","Heating_Arbeitszimmer_Comfort") 

    if (Heating_Arbeitszimmer_Comfort.state==ON) {
        logInfo("heating","Heating Arbeitszimmer ON send") 
        logInfo("heating",localCurrentTemperature.toString) 
        logInfo("heating",localCurrentTemperature_2h.toString) 

        if ((localCurrentTemperature.state<16|°C) && (localCurrentTemperature_2h.state<18|°C)) {
            logInfo("heating","Cold enough, enable heating") 
            sendCommand(FRITZDECT3011Arbeitszimmer_RadiatorMode,'COMFORT')  
            sendCommand(Heating_ToWarm,OFF)                      
            }
        else {
            logInfo("heating","To warm, heating is not enabled") 
            sendCommand(FRITZDECT3011Arbeitszimmer_RadiatorMode,'OFF')  
            sendCommand(Heating_ToWarm,ON)                                  
        }
    }

     else {
        logInfo("heating","Heating Off send") 
            sendCommand(FRITZDECT3011Arbeitszimmer_RadiatorMode,'OFF')  
            sendCommand(Heating_ToWarm,OFF)                                              
     }


end

// ***************** Kueche ****************************************************************************************************


rule "Heating Kueche"
when  Item Heating_Kueche_Comfort received update 
then
    logInfo("heating","Heating_Kueche_Comfort") 

    if (Heating_Kueche_Comfort.state==ON) {
        logInfo("heating","Heating Kueche ON send") 
        logInfo("heating",localCurrentTemperature.toString) 
        logInfo("heating",localCurrentTemperature_2h.toString) 

        if (localCurrentTemperature_2h.state<18|°C) 
        {
            logInfo("heating","Cold enough, enable heating") 
            sendCommand(FRITZDECT3011Kueche_RadiatorMode,'COMFORT')                
            sendCommand(Heating_ToWarm,OFF)                      
        }
        else {
            logInfo("heating","To warm, heating is not enabled") 
            sendCommand(FRITZDECT3011Kueche_RadiatorMode,'OFF')   
            Heating_Kueche_Comfort_120min.postUpdate(OFF) 
            sendCommand(Heating_ToWarm,ON)  
        }
    }
    else {
        logInfo("heating","Heating Off send") 
        sendCommand(FRITZDECT3011Kueche_RadiatorMode,'OFF')    
        Heating_Kueche_Comfort_120min.postUpdate(OFF)         
        sendCommand(Heating_ToWarm,OFF)          
     }

end

rule "Heating Kueche 120min"
when  Item Heating_Kueche_Comfort_120min received update 
then
    logInfo("heating","Heating_Kueche_Comfort_120h")    

   if (Heating_Kueche_Comfort_120min.state==ON) {
        logInfo("heating","Heating ON send") 
        logInfo("heating",localCurrentTemperature.toString) 
        logInfo("heating",localCurrentTemperature_2h.toString) 

        if (localCurrentTemperature_2h.state<18|°C) {
            logInfo("heating","Cold enough, enable heating") 
            sendCommand(FRITZDECT3011Kueche_RadiatorMode,'COMFORT')               
            sendCommand(Heating_ToWarm,OFF)                                  
            createTimer(now.plusMinutes(90))[|
              logInfo("kueche_heizung_morgens", "Timer for 90min finished - switch off the heating")    
                Heating_Kueche_Comfort_120min.sendCommand(OFF)  
                Heating_Kueche_Comfort.postUpdate(OFF)         
            ]            
      
       }
        else {
            logInfo("heating","To warm, heating is not enabled") 
            sendCommand(FRITZDECT3011Kueche_RadiatorMode,'OFF')  
            sendCommand(Heating_ToWarm,ON)  
        }

    } else {
        logInfo("heating","Heating Off send") 
        sendCommand(FRITZDECT3011Kueche_RadiatorMode,'OFF')    
        sendCommand(Heating_ToWarm,OFF)          
    }


end



// ************** Chron *****************************************
// Second, Minutes, Hours, day-of-month, month, day of week, year
// ? is any value for day of month, day of week

// ***************** Arbeitszimmer ****************************************************************************************************

rule "Heating Arbeitszimmer- Night Mode - Switch off at night"
when
	Time cron "0 0 23-01 1/1 * ? *"
then
            Heating_Arbeitszimmer_Comfort.sendCommand(OFF)
end

/* rule "Heating Arbeitszimmer- Workday with Homeoffice "
when
	Time cron "0 30 8 ? * MON,TUE,WED,THU,FRI *"
then
        if (CNOut.state==ON) {
            logInfo("heating","Heating remains off - ABSENCE MODE") 
        } else {
            logInfo("heating","Homeoffice - Make it warm all day") 
            Heating_Arbeitszimmer_Comfort.sendCommand(ON)
        }

end */

// Make it warm at weekend and in the evening

rule "Heating - Weekend Warm Mode - Switch to COMFORT all day"
when
	Time cron "0 0 10 ? * SAT,SUN *"
then
    if(CNOut.state==ON) {
        logInfo("heating","Heating remains off - ABSENCE MODE") 
    } else {
        logInfo("heating","Weekend - Make it warm all day") 
        Heating_Arbeitszimmer_Comfort.sendCommand(ON)
    }
end


 rule "Heating - When Christian comes home"
 when
	 Item CNOut changed 
 then
    if (CNOut.state==ON) {
        // CN out, heating down to ECO
        logInfo("heating","Christian is out  - Heating to OFF") 
            Heating_Arbeitszimmer_Comfort.sendCommand(OFF)

    } else {
        // CN at homw, make it warm
        var Number hours = now.getHour
        logInfo("heating","Time (hour)"+hours.toString) 

        if ((hours <= 22) && (hours>7)) {
            logInfo("heating","Christian coming home  - make it warm - Heating to COMFORT" ) 
            Heating_Arbeitszimmer_Comfort.sendCommand(ON)
        } else {
            logInfo("heating","Christian coming home  - but he should better sleep now" ) 
        }
    }
 end


// ***************** Küche  **************************************************************************************************************************
// Second, Minutes, Hours, day-of-month, month, day of week, year
// ? is any value for day of month, day of week

rule "Heating Kitchen - Night Mode - Switch off at night"
when
	Time cron "0 0 20 1/1 * ? *"
then
        Heating_Kueche_Comfort.sendCommand(OFF)
        logInfo("heating","Good Night  - Heating Kitchen to OFF") 
end

rule "Heating - Christian is out"
when
	 Item CNOut changed 
then
    if (CNOut.state==ON) {
        Heating_Kueche_Comfort.sendCommand(OFF)
        logInfo("heating","Christian Out  - Heating Kitchen to ECO") 
    
    }
end

rule "Heating Kitchen - Good Morning on Workdays"
when
	 Time cron "0 45 6 ? * MON,TUE,WED,THU,FRI *"
then
    if (CNOut.state==OFF) {
        logInfo("heating","Kueche: Good Morning - on Workdays") 
        Heating_Kueche_Comfort_120min.sendCommand(ON)
    }
end

rule "Heating Kitchen - Good Morning on Weekend"
when
	 Time cron "0 15 8 ? * SAT,SUN *"
then
    if (CNOut.state==OFF) {
        logInfo("heating","Good Morning - on Weekend") 
        Heating_Arbeitszimmer_Comfort.sendCommand(ON)
        Heating_Kueche_Comfort_120min.sendCommand(ON)
    }
end

rule "Heating Kitchen - Lunch!"
when
		Time cron "0 45 11 1/1 * ? *"
then
    if (CNOut.state==OFF) {
        logInfo("heating","Lunch with Christian at home") 
        Heating_Kueche_Comfort_120min.sendCommand(ON)

    }end


rule "Heating Kitchen - Dinner"
when
		Time cron "0 30 17 1/1 * ? *"
then
    if ((CNOut.state==OFF) || (ANOut.state==OFF))  {
        logInfo("heating","Dinner with Christian or Anne at home") 
        Heating_Kueche_Comfort_120min.sendCommand(ON)
    } else {
        logInfo("heating","Dinner time, but nowbody at home - no heating") 
    }
end

rule "Heating Arbeitszimmer - Good Morning on Workdays"
when
	 Time cron "0 00 8 ? * MON,TUE,WED,THU,FRI *"
then
    if (CNOut.state==OFF) {
                logInfo("heating","Arbeitszimmer:Good Morning - on Wordays") 
                Heating_Arbeitszimmer_Comfort.sendCommand(ON)
               
    }
end

